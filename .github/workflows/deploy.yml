name: Deploy Notifier Service

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: sa-east-1
      ECR_REGISTRY: <account-id>.dkr.ecr.sa-east-1.amazonaws.com
      ECR_REPOSITORY: notifier-service
      ECS_CLUSTER_NAME: notifier-service-cluster
      ECS_SERVICE_NAME: notifier-service-service

    steps:
      - name: ‚¨áÔ∏è Checkout
        uses: actions/checkout@v4

      - name: üõ†Ô∏è Configurar AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üê≥ Login no Amazon ECR
        run: aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

      - name: üèóÔ∏è Buildar imagem Docker
        run: docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .

      - name: üöÄ Push da imagem para ECR
        run: docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: üîÑ Deploy no ECS
        run: |
          aws ecs update-service \
            --cluster $ECS_CLUSTER_NAME \
            --service $ECS_SERVICE_NAME \
            --force-new-deployment \
            --region $AWS_REGION

      - name: ‚úÖ Notify Slack Success
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"‚úÖ Deploy do Notifier-Service realizado com sucesso!"}' $SLACK_WEBHOOK_URL

      - name: ‚ùå Notify Slack Failure
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"‚ùå Deploy do Notifier-Service falhou!"}' $SLACK_WEBHOOK_URL
